# 整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。

# 例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
# 整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。
# 更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。
# 如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。

# 例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
# 类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
# 而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
# 给你一个整数数组 nums ，找出 nums 的下一个排列。

# 必须 原地 修改，只允许使用额外常数空间。
#########################################################################################################################

# TODO: 记结论
# 1.逆序找到第一个降序元素nums[i-1]
# 2.再次逆序找到第一个大于该降序元素的元素nums[j]
# 3.交换两个元素的位置
# 4.将元素i-1之后（不包括i-1），也就是nums[i:]后元素进行升序排序
# 注意：当1.中没有找到降序元素，说明是654321这种，直接全列表排序，因此也包含了这种情况

class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        i = len(nums) - 1
        # 逆序搜索第一个降序元素nums[i-1]
        while i > 0 and nums[i-1] > nums[i]:
            i -= 1
        # 当i不为0时，说明已经找到该降序元素了
        if i != 0:
            j = len(nums) - 1
            # 再次逆序遍历找到第一个大于nums[i-1]的元素
            ## while j >= 0 and nums[j] < nums[i-1]:
            while nums[j] < nums[i-1]: # TODO: 这里j一定能找得到，而且是大于i-1的
                j -= 1
            # 找到nums[j]后，进行交换
            nums[j], nums[i-1] = nums[i-1], nums[j]
        # 将i-1之后的元素重新升序排列
        nums[i:] = sorted(nums[i:])

        return nums
    
# 总结：
# 时间复杂度：虽然看着是两次遍历，实际上第二次遍历是在第一次遍历的子区间内，因此复杂度为O(nlogn)。
# 空间复杂度：由于本地交换，也没使用数组，因此为O(1)
